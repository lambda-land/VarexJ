package explosion;
import gov.nasa.jpf.annotation.Conditional;
import gov.nasa.jpf.vm.Verify;

public class ExplosionVarexJ {

	public static void main(String[] args) {
		Verify.resetInstructionCounter();
		new ExplosionVarexJ(Integer.parseInt(args[0]));
	}

	@Conditional static boolean a1 = true;
	@Conditional static boolean a2 = true;
	@Conditional static boolean a3 = true;
	@Conditional static boolean a4 = true;
	@Conditional static boolean a5 = true;
	@Conditional static boolean a6 = true;
	@Conditional static boolean a7 = true;
	@Conditional static boolean a8 = true;
	@Conditional static boolean a9 = true;
	@Conditional static boolean a10 = true;
	@Conditional static boolean a11 = true;
	@Conditional static boolean a12 = true;
	@Conditional static boolean a13 = true;
	@Conditional static boolean a14 = true;
	@Conditional static boolean a15 = true;
	@Conditional static boolean a16 = true;
	@Conditional static boolean a17 = true;
	@Conditional static boolean a18 = true;
	@Conditional static boolean a19 = true;
	@Conditional static boolean a20 = true;
	@Conditional static boolean a21 = true;
	@Conditional static boolean a22 = true;
	@Conditional static boolean a23 = true;
	@Conditional static boolean a24 = true;
	@Conditional static boolean a25 = true;
	@Conditional static boolean a26 = true;
	@Conditional static boolean a27 = true;
	@Conditional static boolean a28 = true;
	@Conditional static boolean a29 = true;
	@Conditional static boolean a30 = true;
	@Conditional static boolean a31 = true;
	@Conditional static boolean a32 = true;
	@Conditional static boolean a33 = true;
	@Conditional static boolean a34 = true;
	@Conditional static boolean a35 = true;
	@Conditional static boolean a36 = true;
	@Conditional static boolean a37 = true;
	@Conditional static boolean a38 = true;
	@Conditional static boolean a39 = true;
	@Conditional static boolean a40 = true;
	@Conditional static boolean a41 = true;
	@Conditional static boolean a42 = true;
	@Conditional static boolean a43 = true;
	@Conditional static boolean a44 = true;
	@Conditional static boolean a45 = true;
	@Conditional static boolean a46 = true;
	@Conditional static boolean a47 = true;
	@Conditional static boolean a48 = true;
	@Conditional static boolean a49 = true;
	@Conditional static boolean a50 = true;
	@Conditional static boolean a51 = true;
	@Conditional static boolean a52 = true;
	@Conditional static boolean a53 = true;
	@Conditional static boolean a54 = true;
	@Conditional static boolean a55 = true;
	@Conditional static boolean a56 = true;
	@Conditional static boolean a57 = true;
	@Conditional static boolean a58 = true;
	@Conditional static boolean a59 = true;
	@Conditional static boolean a60 = true;
	@Conditional static boolean a61 = true;
	@Conditional static boolean a62 = true;
	@Conditional static boolean a63 = true;
	@Conditional static boolean a64 = true;
	@Conditional static boolean a65 = true;
	@Conditional static boolean a66 = true;
	@Conditional static boolean a67 = true;
	@Conditional static boolean a68 = true;
	@Conditional static boolean a69 = true;
	@Conditional static boolean a70 = true;
	@Conditional static boolean a71 = true;
	@Conditional static boolean a72 = true;
	@Conditional static boolean a73 = true;
	@Conditional static boolean a74 = true;
	@Conditional static boolean a75 = true;
	@Conditional static boolean a76 = true;
	@Conditional static boolean a77 = true;
	@Conditional static boolean a78 = true;
	@Conditional static boolean a79 = true;
	@Conditional static boolean a80 = true;
	@Conditional static boolean a81 = true;
	@Conditional static boolean a82 = true;
	@Conditional static boolean a83 = true;
	@Conditional static boolean a84 = true;
	@Conditional static boolean a85 = true;
	@Conditional static boolean a86 = true;
	@Conditional static boolean a87 = true;
	@Conditional static boolean a88 = true;
	@Conditional static boolean a89 = true;
	@Conditional static boolean a90 = true;
	@Conditional static boolean a91 = true;
	@Conditional static boolean a92 = true;
	@Conditional static boolean a93 = true;
	@Conditional static boolean a94 = true;
	@Conditional static boolean a95 = true;
	@Conditional static boolean a96 = true;
	@Conditional static boolean a97 = true;
	@Conditional static boolean a98 = true;
	@Conditional static boolean a99 = true;
	
	@Conditional static boolean a100 = true;

	public ExplosionVarexJ(int max) {
		int i = 0;

		int current = 0;
		if (current == max) return;
		if (a1) {i += Math.pow(2, current);}if (++current == max) return;
		if (a2) {i += Math.pow(2, current);}if (++current == max) return;
		if (a3) {i += Math.pow(2, current);}if (++current == max) return;
		if (a4) {i += Math.pow(2, current);}if (++current == max) return;
		if (a5) {i += Math.pow(2, current);}if (++current == max) return;
		if (a6) {i += Math.pow(2, current);}if (++current == max) return;
		if (a7) {i += Math.pow(2, current);}if (++current == max) return;
		if (a8) {i += Math.pow(2, current);}if (++current == max) return;
		if (a9) {i += Math.pow(2, current);}if (++current == max) return;
		if (a10){i += Math.pow(2, current);}if (++current == max) return;
		if (a11){i += Math.pow(2, current);}if (++current == max) return;
		if (a12){i += Math.pow(2, current);}if (++current == max) return;
		if (a13){i += Math.pow(2, current);}if (++current == max) return;
		if (a14){i += Math.pow(2, current);}if (++current == max) return;
		if (a15){i += Math.pow(2, current);}if (++current == max) return;
		if (a16){i += Math.pow(2, current);}if (++current == max) return;
		if (a17){i += Math.pow(2, current);}if (++current == max) return;
		if (a18){i += Math.pow(2, current);}if (++current == max) return;
		if (a19){i += Math.pow(2, current);}if (++current == max) return;
		if (a20){i += Math.pow(2, current);}if (++current == max) return;
		if (a21){i += Math.pow(2, current);}if (++current == max) return;
		if (a22){i += Math.pow(2, current);}if (++current == max) return;
		if (a23){i += Math.pow(2, current);}if (++current == max) return;
		if (a24){i += Math.pow(2, current);}if (++current == max) return;
		if (a25){i += Math.pow(2, current);}if (++current == max) return;
		if (a26){i += Math.pow(2, current);}if (++current == max) return;
		if (a27){i += Math.pow(2, current);}if (++current == max) return;
		if (a28){i += Math.pow(2, current);}if (++current == max) return;
		if (a29){i += Math.pow(2, current);}if (++current == max) return;
		if (a30){i += Math.pow(2, current);}if (++current == max) return;
		if (a31){i += Math.pow(2, current);}if (++current == max) return;
		if (a32){i += Math.pow(2, current);}if (++current == max) return;
		if (a33){i += Math.pow(2, current);}if (++current == max) return;
		if (a34){i += Math.pow(2, current);}if (++current == max) return;
		if (a35){i += Math.pow(2, current);}if (++current == max) return;
		if (a36){i += Math.pow(2, current);}if (++current == max) return;
		if (a37){i += Math.pow(2, current);}if (++current == max) return;
		if (a38){i += Math.pow(2, current);}if (++current == max) return;
		if (a39){i += Math.pow(2, current);}if (++current == max) return;
		if (a40){i += Math.pow(2, current);}if (++current == max) return;
		if (a41){i += Math.pow(2, current);}if (++current == max) return;
		if (a42){i += Math.pow(2, current);}if (++current == max) return;
		if (a43){i += Math.pow(2, current);}if (++current == max) return;
		if (a44){i += Math.pow(2, current);}if (++current == max) return;
		if (a45){i += Math.pow(2, current);}if (++current == max) return;
		if (a46){i += Math.pow(2, current);}if (++current == max) return;
		if (a47){i += Math.pow(2, current);}if (++current == max) return;
		if (a48){i += Math.pow(2, current);}if (++current == max) return;
		if (a49){i += Math.pow(2, current);}if (++current == max) return;
		if (a50){i += Math.pow(2, current);}if (++current == max) return;
		if (a51){i += Math.pow(2, current);}if (++current == max) return;
		if (a52){i += Math.pow(2, current);}if (++current == max) return;
		if (a53){i += Math.pow(2, current);}if (++current == max) return;
		if (a54){i += Math.pow(2, current);}if (++current == max) return;
		if (a55){i += Math.pow(2, current);}if (++current == max) return;
		if (a56){i += Math.pow(2, current);}if (++current == max) return;
		if (a57){i += Math.pow(2, current);}if (++current == max) return;
		if (a58){i += Math.pow(2, current);}if (++current == max) return;
		if (a59){i += Math.pow(2, current);}if (++current == max) return;
		if (a60){i += Math.pow(2, current);}if (++current == max) return;
		if (a61){i += Math.pow(2, current);}if (++current == max) return;
		if (a62){i += Math.pow(2, current);}if (++current == max) return;
		if (a63){i += Math.pow(2, current);}if (++current == max) return;
		if (a64){i += Math.pow(2, current);}if (++current == max) return;
		if (a65){i += Math.pow(2, current);}if (++current == max) return;
		if (a66){i += Math.pow(2, current);}if (++current == max) return;
		if (a67){i += Math.pow(2, current);}if (++current == max) return;
		if (a68){i += Math.pow(2, current);}if (++current == max) return;
		if (a69){i += Math.pow(2, current);}if (++current == max) return;
		if (a70){i += Math.pow(2, current);}if (++current == max) return;
		if (a71){i += Math.pow(2, current);}if (++current == max) return;
		if (a72){i += Math.pow(2, current);}if (++current == max) return;
		if (a73){i += Math.pow(2, current);}if (++current == max) return;
		if (a74){i += Math.pow(2, current);}if (++current == max) return;
		if (a75){i += Math.pow(2, current);}if (++current == max) return;
		if (a76){i += Math.pow(2, current);}if (++current == max) return;
		if (a77){i += Math.pow(2, current);}if (++current == max) return;
		if (a78){i += Math.pow(2, current);}if (++current == max) return;
		if (a79){i += Math.pow(2, current);}if (++current == max) return;
		if (a80){i += Math.pow(2, current);}if (++current == max) return;
		if (a81){i += Math.pow(2, current);}if (++current == max) return;
		if (a82){i += Math.pow(2, current);}if (++current == max) return;
		if (a83){i += Math.pow(2, current);}if (++current == max) return;
		if (a84){i += Math.pow(2, current);}if (++current == max) return;
		if (a85){i += Math.pow(2, current);}if (++current == max) return;
		if (a86){i += Math.pow(2, current);}if (++current == max) return;
		if (a87){i += Math.pow(2, current);}if (++current == max) return;
		if (a88){i += Math.pow(2, current);}if (++current == max) return;
		if (a89){i += Math.pow(2, current);}if (++current == max) return;
		if (a90){i += Math.pow(2, current);}if (++current == max) return;
		if (a91){i += Math.pow(2, current);}if (++current == max) return;
		if (a92){i += Math.pow(2, current);}if (++current == max) return;
		if (a93){i += Math.pow(2, current);}if (++current == max) return;
		if (a94){i += Math.pow(2, current);}if (++current == max) return;
		if (a95){i += Math.pow(2, current);}if (++current == max) return;
		if (a96){i += Math.pow(2, current);}if (++current == max) return;
		if (a97){i += Math.pow(2, current);}if (++current == max) return;
		if (a98){i += Math.pow(2, current);}if (++current == max) return;
		if (a99){i += Math.pow(2, current);}if (++current == max) return;
		if (a100){i += Math.pow(2, current);}if (++current == max) return;
	}
	
}
